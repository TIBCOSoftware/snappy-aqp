hydra.Prms-testRequirement = "Testing sample creation with different sample fractions and qcs";
hydra.Prms-testDescription = "This test creates sample tables with different fractions and qcs
.With every sample creation ,it executes a query on both base table and sample table and the
results are stored as a csv file .";

INCLUDE $JTESTS/io/snappydata/hydra/northwind/startEmbeddedModeCluster.conf;

INITTASK  taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_executeSnappyJob
          io.snappydata.hydra.cluster.SnappyPrms-jobClassNames = io.snappydata.aqp.AQPPerfTestSampleCreation
          io.snappydata.hydra.cluster.SnappyPrms-userAppJar = snappydata-aqp_*-tests.jar
          io.snappydata.hydra.cluster.SnappyPrms-appPropsForJobServer="baseTable=${baseTableName},sampleTable=${sampleTableName},qcsParam1=${qcsParam1},fraction=${sampleFraction1},dataLocation=${dataLocation}/nytaxitripdata_cleaned,outfile=AQP_SampleAPITableQuery"
          threadGroups = snappyThreads
          ;

// Create base table.
INITTASK   taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_executeSQLScripts
           io.snappydata.hydra.cluster.SnappyPrms-sqlScriptNames = ${scriptLocation}
           io.snappydata.hydra.cluster.SnappyPrms-dataLocation = ${dataLocation}
           threadGroups = snappyThreads
           ;

// Execute sql queries on sample table.
INITTASK  taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_executeSnappyJob
          io.snappydata.hydra.cluster.SnappyPrms-jobClassNames = io.snappydata.aqp.AQPExecuteQueryTest
          io.snappydata.hydra.cluster.SnappyPrms-userAppJar = snappydata-aqp_*-tests.jar
          io.snappydata.hydra.cluster.SnappyPrms-appPropsForJobServer = "numIter=1,warmup=0,queryFile=${baseQueryFile},outfile=AQP_BaseTableQuery"
          threadGroups = snappyThreads
          ;

// Execute queries on sample table.
INITTASK  taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_executeSnappyJob
          io.snappydata.hydra.cluster.SnappyPrms-jobClassNames = io.snappydata.aqp.AQPExecuteQueryTest
          io.snappydata.hydra.cluster.SnappyPrms-userAppJar = snappydata-aqp_*-tests.jar
          io.snappydata.hydra.cluster.SnappyPrms-appPropsForJobServer = "numIter=1,warmup=0,queryFile=${sampleQueryFile},outfile=AQP_SampleTableQuery"
          threadGroups = snappyThreads
          ;

//Validate the base table and sample table query results along with the plan
INITTASK  taskClass  = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_executeSnappyJob
          io.snappydata.hydra.cluster.SnappyPrms-jobClassNames = io.snappydata.aqp.AQPValidationTest
          io.snappydata.hydra.cluster.SnappyPrms-userAppJar = snappydata-aqp_*-tests.jar
          io.snappydata.hydra.cluster.SnappyPrms-appPropsForJobServer = "baseScriptDir=${baseScriptDir},queryFile=${sampleQueryFile}"
          threadGroups = snappyThreads
          ;

INCLUDE $JTESTS/io/snappydata/hydra/northwind/stopEmbeddedModeCluster.conf;

hydra.Prms-totalTaskTimeSec           = 100;
hydra.Prms-maxResultWaitSec           = 5000;

io.snappydata.hydra.cluster.SnappyPrms-userAppJar = snappydata-store-scala-tests*tests.jar;
io.snappydata.hydra.cluster.SnappyPrms-shufflePartitions = 6;
io.snappydata.hydra.cluster.SnappyPrms-serverMemory = 4g;
/*io.snappydata.hydra.cluster.SnappyPrms-numBootStrapTrials = 50;

io.snappydata.hydra.cluster.SnappyPrms-leadMemory = 4G;*/

