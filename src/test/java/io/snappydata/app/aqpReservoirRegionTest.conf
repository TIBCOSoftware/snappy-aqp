hydra.Prms-testDescription = "Test Reservoir Region Changes";
hydra.Prms-testRequirement = "In this test we
                              Start a snappy cluster with 2 servers.
                              create base table and sample table .
                              Fire an approximate query and note the result.
                              Have  server1 down.
                              Fire the same query again and note the result.
                              Have the server1 up again and fire the query and note the result.
                              Have server2 down and repeat the above 2 steps,
                              Then at the end compare all the results ,it should be same.
                              By getting 1 server down at a time,ensures that the query is executed
                              on each of the nodes.
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_3.inc;

hydra.gemfirexd.GfxdHelperPrms-persistDD = true;
hydra.gemfirexd.GfxdHelperPrms-createDiskStore = true;
hydra.GemFirePrms-names = gemfire1;
hydra.ClientPrms-gemfireNames = gemfire1;
hydra.GemFirePrms-distributedSystem = ds;

THREADGROUP snappyStoreThreads
            totalThreads = fcn "(${${A}Hosts} * ${${A}VMsPerHost} *  ${${A}ThreadsPerVM}) " ncf
            totalVMs     = fcn "(${${A}Hosts} * ${${A}VMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${A}\",
                                ${${A}Hosts}, true)" ncf;

THREADGROUP leadThreads
            totalThreads = fcn "(${${B}Hosts} * ${${B}VMsPerHost} *  ${${B}ThreadsPerVM}) -1 " ncf
            totalVMs     = fcn "(${${B}Hosts} * ${${B}VMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${B}\",
                                ${${B}Hosts}, true)" ncf;

THREADGROUP locatorThreads
            totalThreads = fcn "(${${C}Hosts} * ${${C}VMsPerHost} *  ${${C}ThreadsPerVM}) " ncf
            totalVMs     = fcn "(${${C}Hosts} * ${${C}VMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${C}\",
                                ${${C}Hosts}, true)" ncf;
THREADGROUP snappyThreads
            totalThreads = 1
            totalVMs     = 1
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${B}\",
                                ${${B}Hosts}, true)" ncf;

INITTASK   taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_initializeSnappyTest
           runMode = always
           threadGroups = snappyThreads, locatorThreads, snappyStoreThreads, leadThreads;

INITTASK   taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_generateSnappyLocatorConfig
           runMode = always
           threadGroups = locatorThreads;

INITTASK   taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_writeLocatorConfigData
           runMode = always
           threadGroups = snappyThreads;

INITTASK   taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_generateSnappyServerConfig
           runMode = always
           threadGroups = snappyStoreThreads;

INITTASK   taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_writeServerConfigData
           runMode = always
           threadGroups = snappyThreads;

INITTASK   taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_generateSnappyLeadConfig
           runMode = always
           threadGroups = leadThreads, snappyThreads;

INITTASK   taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_writeLeadConfigData
           runMode = always
           threadGroups = snappyThreads;

INITTASK    taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_startSnappyCluster
            runMode = always
            threadGroups = snappyThreads;

INITTASK    taskClass   = util.StopStartVMs  taskMethod = StopStart_initTask
            threadGroups = snappyThreads, locatorThreads, snappyStoreThreads, leadThreads;


INITTASK    taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = backUpServerConfigData
            threadGroups = snappyThreads;


INITTASK   taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_executeSnappyJob
          io.snappydata.hydra.cluster.SnappyPrms-jobClassNames = io.snappydata.aqp.AQPTableCreation
          io.snappydata.hydra.cluster.SnappyPrms-userAppJar = snappydata-aqp_*-tests.jar
          io.snappydata.hydra.cluster.SnappyPrms-appPropsForJobServer = "dataLocation=${dataLocation},qcsParam1=${qcsParam1},qcsParam2=${qcsParam2},qcsParam3=${qcsParam3},sampleFraction=${sampleFraction},redundancy=1"
           threadGroups = snappyThreads
           ;

INITTASK   taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_executeSnappyJob
          io.snappydata.hydra.cluster.SnappyPrms-jobClassNames = io.snappydata.aqp.AQPReservoirRegionTest
          io.snappydata.hydra.cluster.SnappyPrms-userAppJar = snappydata-aqp_*-tests.jar
          io.snappydata.hydra.cluster.SnappyPrms-appPropsForJobServer = "numIter=1,warmup=0,queryFile=${queryFile},outfile=AQP1"
           threadGroups = snappyThreads
           ;

/*INITTASK   taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_cycleStoreVms
           io.snappydata.hydra.cluster.SnappyPrms-cycleVMTarget = snappyStore1
           io.snappydata.hydra.cluster.SnappyPrms-restartStoreVM = false
           threadGroups = snappyThreads
           ;*/

INITTASK    taskClass  = io.snappydata.hydra.cdcConnector.SnappyCDCTest taskMethod  = HydraTask_performHA
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-nodeName = ${serverNode}
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-snappyFileLoc = ${snappyPath}
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-nodeType = servers
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-isOnlyStop = true
            threadGroups = snappyInitThread;

INITTASK   taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_executeSnappyJob
          io.snappydata.hydra.cluster.SnappyPrms-jobClassNames = io.snappydata.aqp.AQPReservoirRegionTest
          io.snappydata.hydra.cluster.SnappyPrms-userAppJar = snappydata-aqp_*-tests.jar
          io.snappydata.hydra.cluster.SnappyPrms-appPropsForJobServer = "numIter=1,warmup=0,queryFile=${queryFile},outfile=AQP2"
           threadGroups = snappyThreads
           ;

/*
INITTASK   taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_restartStoreVM
           threadGroups = snappyThreads
           ;
*/

INITTASK    taskClass  = io.snappydata.hydra.cdcConnector.SnappyCDCTest taskMethod  = HydraTask_startCluster
             io.snappydata.hydra.cdcConnector.SnappyCDCPrms-snappyFileLoc = ${snappyPath}
              threadGroups = snappyThreads
                        ;

INITTASK   taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_executeSnappyJob
          io.snappydata.hydra.cluster.SnappyPrms-jobClassNames = io.snappydata.aqp.AQPReservoirRegionTest
          io.snappydata.hydra.cluster.SnappyPrms-userAppJar = snappydata-aqp_*-tests.jar
          io.snappydata.hydra.cluster.SnappyPrms-appPropsForJobServer = "numIter=1,warmup=0,queryFile=${queryFile},outfile=AQP3"
           threadGroups = snappyThreads
           ;

INITTASK   taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_cycleStoreVms
           io.snappydata.hydra.cluster.SnappyPrms-cycleVMTarget = snappyStore2
           io.snappydata.hydra.cluster.SnappyPrms-restartStoreVM = false
           threadGroups = snappyThreads
           ;

INITTASK   taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_executeSnappyJob
          io.snappydata.hydra.cluster.SnappyPrms-jobClassNames = io.snappydata.aqp.AQPReservoirRegionTest
          io.snappydata.hydra.cluster.SnappyPrms-userAppJar = snappydata-aqp_*-tests.jar
          io.snappydata.hydra.cluster.SnappyPrms-appPropsForJobServer = "numIter=1,warmup=0,queryFile=${queryFile},outfile=AQP4"
           threadGroups = snappyThreads
           ;

INITTASK   taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_restartStoreVM
           threadGroups = snappyThreads
           ;



INITTASK   taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_executeSnappyJob
          io.snappydata.hydra.cluster.SnappyPrms-jobClassNames = io.snappydata.aqp.AQPValidationTest
          io.snappydata.hydra.cluster.SnappyPrms-userAppJar = snappydata-aqp_*-tests.jar
          io.snappydata.hydra.cluster.SnappyPrms-appPropsForJobServer = "outfile=AQP,baseScriptDir=${baseScriptDir},queryFile=${queryFile}"
           threadGroups = snappyThreads
           ;

CLOSETASK  taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = restoreServerConfigData
           threadGroups = snappyThreads;


ENDTASK    taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_stopSnappy
           clientNames = locator1;

ENDTASK    taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_stopSnappyCluster
           clientNames = locator1;

ENDTASK    taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_deleteSnappyConfig
           clientNames = locator1;

ENDTASK    taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_cleanUpSnappyProcessesOnFailure
           clientNames = locator1;

hydra.Prms-totalTaskTimeSec           = 100;
hydra.Prms-maxResultWaitSec           = 5000;

hydra.Prms-maxCloseTaskResultWaitSec  = 5000;
hydra.Prms-serialExecution            = true;

hydra.CachePrms-names = defaultCache;
sql.SQLPrms-useGfxdConfig = true;

/* end task must stop snappy members because they are not stopped by Hydra */
hydra.Prms-alwaysDoEndTasks = true;

hydra.VmPrms-extraVMArgs   += fcn "hydra.TestConfigFcns.duplicate
                                  (\"-Xms512m -Xmx1g \", ${${A}Hosts}, true)"
                             ncf
                             ,
                             fcn "hydra.TestConfigFcns.duplicate
                                  (\"-Xms512m -Xmx1g \", ${${B}Hosts}, true)"
                             ncf;
hydra.VmPrms-extraVMArgsSUN += "-XX:PermSize=64M -XX:MaxPermSize=256m";

io.snappydata.hydra.cluster.SnappyPrms-userAppJar = snappydata-store-scala-tests*tests.jar;
io.snappydata.hydra.cluster.SnappyPrms-shufflePartitions = 6;
io.snappydata.hydra.cluster.SnappyPrms-serverMemory = 4g;

io.snappydata.hydra.cluster.SnappyPrms-waitTimeBeforeNextCycleVM = 240; //how long to wait before nodes will be cycled.
io.snappydata.hydra.cluster.SnappyPrms-cycleVms = true;

//hydra.Prms-totalTaskTimeSec           = 240;

util.StopStartPrms-stopModes = NICE_KILL;
util.StopStartPrms-numVMsToStop = RANGE 1 ${numVMsToStop} EGNAR;
/*io.snappydata.hydra.cluster.SnappyPrms-numBootStrapTrials = 50;

io.snappydata.hydra.cluster.SnappyPrms-leadMemory = 4G;*/
